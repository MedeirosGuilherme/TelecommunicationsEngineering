/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Project;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.ListIterator;
import java.util.Scanner;

import Project.dao.CandidatoDao;
import Project.dao.ElaboradorDao;
import Project.dao.GabaritoDao;
import Project.dao.GestorDao;
import Project.dao.ProcessoSeletivoDao;
import Project.dao.ProvaDao;
import Project.dao.ProvaQuestaoDao;
import Project.dao.QuestaoDao;
import Project.dao.TemaDao;
import Project.dao.TemaElaboradorDao;
import Project.entities.Candidato;
import Project.entities.Elaborador;
import Project.entities.Gabarito;
import Project.entities.Gestor;
import Project.entities.ProcessoSeletivo;
import Project.entities.Prova;
import Project.entities.Questao;
import Project.entities.Tema;

public class App {

    /* Início do sistema de gestão de concursos
     * método de execução principal do programa
     */
    public static void main(String[] args) throws Exception {

        // Variáveis iniciais:
        int loginType = 0;
        int login = 0;
        String senha = new String();
        App app = new App();

        // Menu principal
        Scanner in = new Scanner(System.in);
        System.out.println("Escolha como você quer entrar: \n");
        System.out.println("1. Candidato\n");
        System.out.println("2. Elaborador\n");
        System.out.println("3. Gestor \n");
        System.out.println("4. Cadastrar conta \n\n");
               
        if(in.hasNextInt()){
            loginType = in.nextInt();
        }
    
        // Switch da autenticação:
        switch (loginType){
            case 1: // Candidato
                System.out.println("Bem vindo! Autentique-se: \n");
                System.out.println("Login: ");
            
                if(in.hasNextLine()){
                    login = in.nextInt();
                    System.out.println("Senha: ");
                    senha = in.next();
                }
                Candidato candidato = new Candidato();
                candidato = CandidatoDao.findById(login);
    
                if(candidato.getSenha().equals(senha)){
                    System.out.println("Ola, " + candidato.getNome() + "!\n");
                    app.candidatoRun(candidato.getIdCandidato());
                    break;
                }
                else{
                    System.out.println("Suas credenciais não foram encontradas no sistema, refaça a autenticação!\n");
                    break;
                }
                
            case 2: // Elaborador
                System.out.println("Bem vindo! Autentique-se: \n");
                System.out.println("Login: ");
            
                if(in.hasNextLine()){
                    login = in.nextInt();
                    System.out.println("Senha: ");
                    senha = in.next();
                }

                Elaborador elaborador = new Elaborador();
                elaborador = ElaboradorDao.findById(login);

                if(elaborador.getSenha().equals(senha)){
                    System.out.println("Ola, " + elaborador.getNome() + "!\n");
                    app.elaboradorRun(elaborador.getIdElaborador());
                    break;
                }
                else{
                    System.out.println("Suas credenciais não foram encontradas no sistema, refaça a autenticação!\n");
                    break;
                }
                
            case 3:// Gestor
                System.out.println("Bem vindo! Autentique-se: \n");
                System.out.println("Login: ");
            
                if(in.hasNextLine()){
                    login = in.nextInt();
                    System.out.println("Senha: ");
                    senha = in.next();
                }

                Gestor gestor = new Gestor();
                gestor = GestorDao.findById(login);

                if(gestor.getSenha().equals(senha)){
                    System.out.println("Ola, " + gestor.getNome() + "!\n");
                    app.gestorRun(gestor.getIdGestor());
                    break;
                }
                else{
                    System.out.println("Suas credenciais não foram encontradas no sistema, refaça a autenticação!\n");
                    break;
                }
                
            case 4: // Cadastrar novo usuário:
                app.cadastrarNovoUser();
                break;    
            
            default:
                System.out.println("Opção escolhida errada, reinicie a aplicação.");
            }
        in.nextLine();
        in.close();
    }

    private boolean candidatoRun(int idCandidato) throws Exception{

        Scanner in = new Scanner(System.in);
        int menuEntrance = 0;
        int menuProcesso = 0;
        int idProcessoFeito = 0;
        ArrayList<ProcessoSeletivo> listaProcessos = ProcessoSeletivoDao.findAll();

        System.out.println("Bem vindo, candidato! Selecione uma das opções no menu:\n");
        System.out.println("1. Ver gabarito de provas já feitas.\n");
        System.out.println("2. Fazer um processo seletivo.\n");
        System.out.println("3. Para sair do menu de candidato.\n");

        if(in.hasNext()){
            menuEntrance = in.nextInt();
        }

        if(menuEntrance == 1){
            System.out.println("Ids de processos feitos por você: \n");
            ArrayList<Gabarito> listaGabaritos = new ArrayList<>();
            listaGabaritos = GabaritoDao.findGabaritoByIdCandidato(idCandidato);
            for (Gabarito gabarito : listaGabaritos) {
                System.out.println(gabarito.getProcessoId() + "\n");                
            }

            System.out.println("Digite o id do processo seletivo que deseja comparar o gabarito: \n");

            if(in.hasNext()){
                idProcessoFeito = in.nextInt();
            }

            Gabarito gabaritoUsuario = GabaritoDao.findByProcessoId(idProcessoFeito, idCandidato);
            String gabaritoCorreto = ProcessoSeletivoDao.geraGabarito(idCandidato);

            System.out.print("Suas respostas: \n");
            System.out.println(gabaritoUsuario.getGabarito().toString());
            System.out.print("\nRespostas corretas: \n");
            System.out.println(gabaritoCorreto.toString());

        }
        else if(menuEntrance == 2){
            System.out.println("Ids de Processos seletivos abertos: \n");

            for (ProcessoSeletivo processoSeletivo : listaProcessos) {
                System.out.println(processoSeletivo.getIdProcesso());
            }

            System.out.println("\nDigite a id do processo que deseja realizar: ");

            if(in.hasNext()){
                menuProcesso = in.nextInt();
            }

            System.out.println("Boa sorte... ");

            ProcessoSeletivo processo = ProcessoSeletivoDao.findById(menuProcesso);
            Prova prova = ProvaDao.findById(processo.getIdProva());

            ArrayList<Questao> questoes = ProvaQuestaoDao.questaoPorProva(prova.getIdProva());
            ArrayList<String> respostas = new ArrayList<>();
            String resposta = new String();

            for (Questao questao : questoes) {
                System.out.println(questao.toString());
                System.out.print("Sua resposta: ");

                if(in.hasNext()){
                    resposta = in.next();
                }
                respostas.add(resposta);
            }

            System.out.println("Processo finalizado... confira se suas respostas estão corretas vendo o gabarito desse processo seletivo!");
            StringBuilder str = new StringBuilder();
            for (String string : respostas) {
                str.append(string);
                str.append(",");
            }

            String gabaritoResultante = str.toString();
            GabaritoDao.insert(gabaritoResultante, idCandidato, menuProcesso);
        }
        
        else{
            System.out.println("Até logo, candidato! Refaça a autenticação caso queira reentrar no sistema.\n\n\n");
        }

        in.close();
        return true;
    }

    private boolean elaboradorRun(int idElaborador) throws Exception{
        int menuEntrance = 0;
        String descricao = new String();
        String altA = new String();
        String altB = new String();
        String altC = new String();
        String altD = new String();
        String altCerta = new String();
        int dificuldade = 0;
        int idTema = 0;

        Scanner in = new Scanner(System.in);

        System.out.println("Bem vindo, Elaborador! Selecione uma das opções no menu:\n");
        System.out.println("1. Cadastrar questão\n");
        System.out.println("2. Ver tema que estais cadastrados\n");
        System.out.println("3. Para sair do menu de elaborador de questões\n");

        if(in.hasNextInt()){
            menuEntrance = in.nextInt();
        }

        if(menuEntrance == 1){
            System.out.println("\n Cadastro de questões: \n");
            System.out.println("Digite a descrição da questao: \n");
            if(in.hasNext()){
                descricao = in.next();
            }
            System.out.println("Digite a alternativa as alternativas (a, b, c e d): \n");
            if(in.hasNext()){
                altA = in.next();
            }
            if(in.hasNext()){
                altB = in.next();
            }
            if(in.hasNext()){
                altC = in.next();
            }
            if(in.hasNext()){
                altD = in.next();
            }
            System.out.println("Digite a letra da alternativa correta (a,b,c,d): \n ");
            if(in.hasNext()){
                altCerta = in.next();
            }

            if(!altCerta.equals("a") && !altCerta.equals("b") && !altCerta.equals("c") && !altCerta.equals("d")){
                System.out.println("Questão certa passa de forma inadequada, digite apenas a letra (a, b, c ou d) na sua forma minúscula\n Refaça a operação!");
                menuEntrance = 0;
                in.close();
                return false;
            }

            System.out.println("Digite a dificuldade da questão (numeral inteiro até 4)\n");
            
            if(in.hasNext()){
                dificuldade = in.nextInt();
            }

            System.out.println("Digite o código do tema (numeral inteiro)\n");
            if(in.hasNext()){
                idTema = in.nextInt();
            }

            QuestaoDao.insert(descricao, altA, altB, altC, altD, altCerta, dificuldade, idElaborador, idTema);
        }
        else if(menuEntrance == 2){
            ArrayList<Tema> temas = new ArrayList<>();
            temas = TemaElaboradorDao.temaPorElaborador(idElaborador);
            System.out.println(temas);
        }
        else if(menuEntrance == 3){
            System.out.println("Até logo, Elaborador! Refaça a autenticação caso queira reentrar no sistema.\n\n\n");
        }
        else{
            System.out.println("Entrada não encontrada, refaça o pedido");
            in.close();
            return false;
        }
        in.close();        
        return true;
    }

    private boolean gestorRun(int idGestor) throws Exception{
        int menuEntrance = 0;
        Scanner in = new Scanner(System.in);
        int idProva = 0;
        int idTema = 0;
        ArrayList<Questao> listaQuestao = new ArrayList<>();
        System.out.println("Bem vindo gestor! Escolha uma das opções para continuar: \n");
        System.out.println("1. Cadastrar um processo seletivo\n");
        System.out.println("2. Criar prova\n");
        System.out.println("3. Listar temas\n");
        System.out.println("4. Sair do sistema");
        if(in.hasNext()){
            menuEntrance = in.nextInt();
        }

        if(menuEntrance == 1){
            System.out.println("Digite a ID de uma prova");
            if(in.hasNext()){
                idProva = in.nextInt();
            }

            ProcessoSeletivoDao.insert(idGestor, idProva);
        }
        else if(menuEntrance == 2){

            ProvaDao.insert(idGestor);
            System.out.println("Digite a id do tema da prova: \n");
            if(in.hasNext()){
                idTema = in.nextInt();
            }

            listaQuestao = QuestaoDao.findByTema(idTema);
            Prova prova = ProvaDao.selectMaxProva();
            
            for (Questao questao : listaQuestao) {
                ProvaQuestaoDao.insert(prova.getIdProva(), questao.getIdQuestao());   
                System.out.println("Chegou");             
            }
        }
        else if(menuEntrance == 3){
            ArrayList<Tema> lista = new ArrayList<>();
            lista = TemaDao.findByAll();
            System.out.println(lista.toString());
        }
        else{
            System.out.println("Opção inválida selecionada! Refaça o processo.\n");
        }

        in.close();
        return true;

    }

    private void cadastrarNovoUser() throws Exception{
        Scanner in = new Scanner(System.in);
        String newUserLogin = new String();
        String newUserPassword = new String();
        System.out.println("Digite 1 para cadastrar Candidato ou 2 para cadastrar Elaborador de Questões\n");
        int newUserOption = in.nextInt();
        System.out.println("Digite o nome de usuário: ");
        newUserLogin = in.next();
        System.out.println("Digite a senha: ");
        newUserPassword = in.next();

        if(newUserOption == 1){
            CandidatoDao.insert(newUserLogin, newUserPassword);
            System.out.println("Usuário cadastrado!\n");
        }

        else if(newUserOption == 2){
            ElaboradorDao.insert(newUserLogin, newUserPassword);
            System.out.println("Usuário cadastrado!\n");
        }

        else{
            System.out.println("Entrada de opção de usuário inválida! Refaça a operação!\n");
        }

        in.close();
    }
    
}
